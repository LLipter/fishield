// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file_transfer.proto

#ifndef PROTOBUF_INCLUDED_file_5ftransfer_2eproto
#define PROTOBUF_INCLUDED_file_5ftransfer_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_file_5ftransfer_2eproto 

namespace protobuf_file_5ftransfer_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_file_5ftransfer_2eproto
namespace fs {
namespace proto {
class File;
class FileDefaultTypeInternal;
extern FileDefaultTypeInternal _File_default_instance_;
class FileList;
class FileListDefaultTypeInternal;
extern FileListDefaultTypeInternal _FileList_default_instance_;
class Packet;
class PacketDefaultTypeInternal;
extern PacketDefaultTypeInternal _Packet_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
}  // namespace proto
}  // namespace fs
namespace google {
namespace protobuf {
template<> ::fs::proto::File* Arena::CreateMaybeMessage<::fs::proto::File>(Arena*);
template<> ::fs::proto::FileList* Arena::CreateMaybeMessage<::fs::proto::FileList>(Arena*);
template<> ::fs::proto::Packet* Arena::CreateMaybeMessage<::fs::proto::Packet>(Arena*);
template<> ::fs::proto::Request* Arena::CreateMaybeMessage<::fs::proto::Request>(Arena*);
template<> ::fs::proto::Response* Arena::CreateMaybeMessage<::fs::proto::Response>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace fs {
namespace proto {

enum File_FileType {
  File_FileType_REGULAR = 0,
  File_FileType_DIRECTORY = 1,
  File_FileType_SYMLINK = 2,
  File_FileType_OTHER = 3
};
bool File_FileType_IsValid(int value);
const File_FileType File_FileType_FileType_MIN = File_FileType_REGULAR;
const File_FileType File_FileType_FileType_MAX = File_FileType_OTHER;
const int File_FileType_FileType_ARRAYSIZE = File_FileType_FileType_MAX + 1;

const ::google::protobuf::EnumDescriptor* File_FileType_descriptor();
inline const ::std::string& File_FileType_Name(File_FileType value) {
  return ::google::protobuf::internal::NameOfEnum(
    File_FileType_descriptor(), value);
}
inline bool File_FileType_Parse(
    const ::std::string& name, File_FileType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<File_FileType>(
    File_FileType_descriptor(), name, value);
}
enum Request_RequestType {
  Request_RequestType_LOGIN = 0,
  Request_RequestType_FILELIST = 1,
  Request_RequestType_MKDIR = 2,
  Request_RequestType_UPLOAD = 3,
  Request_RequestType_SEND_PACKET = 4,
  Request_RequestType_DOWNLOAD = 5,
  Request_RequestType_RECEIVE_PACKET = 6,
  Request_RequestType_DOWNLOAD_CONFIRM = 7,
  Request_RequestType_REMOVE = 8,
  Request_RequestType_RENAME = 9,
  Request_RequestType_CANCEL = 10
};
bool Request_RequestType_IsValid(int value);
const Request_RequestType Request_RequestType_RequestType_MIN = Request_RequestType_LOGIN;
const Request_RequestType Request_RequestType_RequestType_MAX = Request_RequestType_CANCEL;
const int Request_RequestType_RequestType_ARRAYSIZE = Request_RequestType_RequestType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Request_RequestType_descriptor();
inline const ::std::string& Request_RequestType_Name(Request_RequestType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Request_RequestType_descriptor(), value);
}
inline bool Request_RequestType_Parse(
    const ::std::string& name, Request_RequestType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Request_RequestType>(
    Request_RequestType_descriptor(), name, value);
}
enum Response_ResponseType {
  Response_ResponseType_SUCCESS = 0,
  Response_ResponseType_NOSUCHUSER = 1,
  Response_ResponseType_ILLEGALPASSWD = 2,
  Response_ResponseType_UNKNOWN = 3,
  Response_ResponseType_NORESPONSE = 4,
  Response_ResponseType_ILLEGALTOKEN = 5,
  Response_ResponseType_ILLEGALPATH = 6,
  Response_ResponseType_ILLEGALREQUEST = 7,
  Response_ResponseType_ILLEGALTASKSTATUS = 8,
  Response_ResponseType_ILLEGALTASKID = 9,
  Response_ResponseType_ILLEGALPACKETID = 10,
  Response_ResponseType_ILLEGALCLIENTID = 11
};
bool Response_ResponseType_IsValid(int value);
const Response_ResponseType Response_ResponseType_ResponseType_MIN = Response_ResponseType_SUCCESS;
const Response_ResponseType Response_ResponseType_ResponseType_MAX = Response_ResponseType_ILLEGALCLIENTID;
const int Response_ResponseType_ResponseType_ARRAYSIZE = Response_ResponseType_ResponseType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Response_ResponseType_descriptor();
inline const ::std::string& Response_ResponseType_Name(Response_ResponseType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Response_ResponseType_descriptor(), value);
}
inline bool Response_ResponseType_Parse(
    const ::std::string& name, Response_ResponseType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Response_ResponseType>(
    Response_ResponseType_descriptor(), name, value);
}
// ===================================================================

class File : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fs.proto.File) */ {
 public:
  File();
  virtual ~File();

  File(const File& from);

  inline File& operator=(const File& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  File(File&& from) noexcept
    : File() {
    *this = ::std::move(from);
  }

  inline File& operator=(File&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const File& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const File* internal_default_instance() {
    return reinterpret_cast<const File*>(
               &_File_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(File* other);
  friend void swap(File& a, File& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline File* New() const final {
    return CreateMaybeMessage<File>(NULL);
  }

  File* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<File>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const File& from);
  void MergeFrom(const File& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(File* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef File_FileType FileType;
  static const FileType REGULAR =
    File_FileType_REGULAR;
  static const FileType DIRECTORY =
    File_FileType_DIRECTORY;
  static const FileType SYMLINK =
    File_FileType_SYMLINK;
  static const FileType OTHER =
    File_FileType_OTHER;
  static inline bool FileType_IsValid(int value) {
    return File_FileType_IsValid(value);
  }
  static const FileType FileType_MIN =
    File_FileType_FileType_MIN;
  static const FileType FileType_MAX =
    File_FileType_FileType_MAX;
  static const int FileType_ARRAYSIZE =
    File_FileType_FileType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FileType_descriptor() {
    return File_FileType_descriptor();
  }
  static inline const ::std::string& FileType_Name(FileType value) {
    return File_FileType_Name(value);
  }
  static inline bool FileType_Parse(const ::std::string& name,
      FileType* value) {
    return File_FileType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string filename = 1;
  bool has_filename() const;
  void clear_filename();
  static const int kFilenameFieldNumber = 1;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // required uint64 mtime = 2;
  bool has_mtime() const;
  void clear_mtime();
  static const int kMtimeFieldNumber = 2;
  ::google::protobuf::uint64 mtime() const;
  void set_mtime(::google::protobuf::uint64 value);

  // optional uint64 size = 4;
  bool has_size() const;
  void clear_size();
  static const int kSizeFieldNumber = 4;
  ::google::protobuf::uint64 size() const;
  void set_size(::google::protobuf::uint64 value);

  // required .fs.proto.File.FileType file_type = 3;
  bool has_file_type() const;
  void clear_file_type();
  static const int kFileTypeFieldNumber = 3;
  ::fs::proto::File_FileType file_type() const;
  void set_file_type(::fs::proto::File_FileType value);

  // @@protoc_insertion_point(class_scope:fs.proto.File)
 private:
  void set_has_filename();
  void clear_has_filename();
  void set_has_mtime();
  void clear_has_mtime();
  void set_has_file_type();
  void clear_has_file_type();
  void set_has_size();
  void clear_has_size();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::google::protobuf::uint64 mtime_;
  ::google::protobuf::uint64 size_;
  int file_type_;
  friend struct ::protobuf_file_5ftransfer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FileList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fs.proto.FileList) */ {
 public:
  FileList();
  virtual ~FileList();

  FileList(const FileList& from);

  inline FileList& operator=(const FileList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FileList(FileList&& from) noexcept
    : FileList() {
    *this = ::std::move(from);
  }

  inline FileList& operator=(FileList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileList* internal_default_instance() {
    return reinterpret_cast<const FileList*>(
               &_FileList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(FileList* other);
  friend void swap(FileList& a, FileList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileList* New() const final {
    return CreateMaybeMessage<FileList>(NULL);
  }

  FileList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FileList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FileList& from);
  void MergeFrom(const FileList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .fs.proto.File file = 2;
  int file_size() const;
  void clear_file();
  static const int kFileFieldNumber = 2;
  ::fs::proto::File* mutable_file(int index);
  ::google::protobuf::RepeatedPtrField< ::fs::proto::File >*
      mutable_file();
  const ::fs::proto::File& file(int index) const;
  ::fs::proto::File* add_file();
  const ::google::protobuf::RepeatedPtrField< ::fs::proto::File >&
      file() const;

  // required string path = 1;
  bool has_path() const;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:fs.proto.FileList)
 private:
  void set_has_path();
  void clear_has_path();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::fs::proto::File > file_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  friend struct ::protobuf_file_5ftransfer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Packet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fs.proto.Packet) */ {
 public:
  Packet();
  virtual ~Packet();

  Packet(const Packet& from);

  inline Packet& operator=(const Packet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Packet(Packet&& from) noexcept
    : Packet() {
    *this = ::std::move(from);
  }

  inline Packet& operator=(Packet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Packet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Packet* internal_default_instance() {
    return reinterpret_cast<const Packet*>(
               &_Packet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Packet* other);
  friend void swap(Packet& a, Packet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Packet* New() const final {
    return CreateMaybeMessage<Packet>(NULL);
  }

  Packet* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Packet>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Packet& from);
  void MergeFrom(const Packet& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Packet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // required uint64 packet_id = 1;
  bool has_packet_id() const;
  void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  ::google::protobuf::uint64 packet_id() const;
  void set_packet_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:fs.proto.Packet)
 private:
  void set_has_packet_id();
  void clear_has_packet_id();
  void set_has_data();
  void clear_has_data();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::uint64 packet_id_;
  friend struct ::protobuf_file_5ftransfer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fs.proto.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Request* other);
  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(NULL);
  }

  Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Request_RequestType RequestType;
  static const RequestType LOGIN =
    Request_RequestType_LOGIN;
  static const RequestType FILELIST =
    Request_RequestType_FILELIST;
  static const RequestType MKDIR =
    Request_RequestType_MKDIR;
  static const RequestType UPLOAD =
    Request_RequestType_UPLOAD;
  static const RequestType SEND_PACKET =
    Request_RequestType_SEND_PACKET;
  static const RequestType DOWNLOAD =
    Request_RequestType_DOWNLOAD;
  static const RequestType RECEIVE_PACKET =
    Request_RequestType_RECEIVE_PACKET;
  static const RequestType DOWNLOAD_CONFIRM =
    Request_RequestType_DOWNLOAD_CONFIRM;
  static const RequestType REMOVE =
    Request_RequestType_REMOVE;
  static const RequestType RENAME =
    Request_RequestType_RENAME;
  static const RequestType CANCEL =
    Request_RequestType_CANCEL;
  static inline bool RequestType_IsValid(int value) {
    return Request_RequestType_IsValid(value);
  }
  static const RequestType RequestType_MIN =
    Request_RequestType_RequestType_MIN;
  static const RequestType RequestType_MAX =
    Request_RequestType_RequestType_MAX;
  static const int RequestType_ARRAYSIZE =
    Request_RequestType_RequestType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RequestType_descriptor() {
    return Request_RequestType_descriptor();
  }
  static inline const ::std::string& RequestType_Name(RequestType value) {
    return Request_RequestType_Name(value);
  }
  static inline bool RequestType_Parse(const ::std::string& name,
      RequestType* value) {
    return Request_RequestType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string username = 2;
  bool has_username() const;
  void clear_username();
  static const int kUsernameFieldNumber = 2;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional string password = 3;
  bool has_password() const;
  void clear_password();
  static const int kPasswordFieldNumber = 3;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // optional string token = 4;
  bool has_token() const;
  void clear_token();
  static const int kTokenFieldNumber = 4;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // optional string remote_path = 5;
  bool has_remote_path() const;
  void clear_remote_path();
  static const int kRemotePathFieldNumber = 5;
  const ::std::string& remote_path() const;
  void set_remote_path(const ::std::string& value);
  #if LANG_CXX11
  void set_remote_path(::std::string&& value);
  #endif
  void set_remote_path(const char* value);
  void set_remote_path(const char* value, size_t size);
  ::std::string* mutable_remote_path();
  ::std::string* release_remote_path();
  void set_allocated_remote_path(::std::string* remote_path);

  // optional string filename = 6;
  bool has_filename() const;
  void clear_filename();
  static const int kFilenameFieldNumber = 6;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // optional string new_path = 11;
  bool has_new_path() const;
  void clear_new_path();
  static const int kNewPathFieldNumber = 11;
  const ::std::string& new_path() const;
  void set_new_path(const ::std::string& value);
  #if LANG_CXX11
  void set_new_path(::std::string&& value);
  #endif
  void set_new_path(const char* value);
  void set_new_path(const char* value, size_t size);
  ::std::string* mutable_new_path();
  ::std::string* release_new_path();
  void set_allocated_new_path(::std::string* new_path);

  // optional .fs.proto.Packet packet = 8;
  bool has_packet() const;
  void clear_packet();
  static const int kPacketFieldNumber = 8;
  private:
  const ::fs::proto::Packet& _internal_packet() const;
  public:
  const ::fs::proto::Packet& packet() const;
  ::fs::proto::Packet* release_packet();
  ::fs::proto::Packet* mutable_packet();
  void set_allocated_packet(::fs::proto::Packet* packet);

  // optional uint64 packet_no = 7;
  bool has_packet_no() const;
  void clear_packet_no();
  static const int kPacketNoFieldNumber = 7;
  ::google::protobuf::uint64 packet_no() const;
  void set_packet_no(::google::protobuf::uint64 value);

  // optional uint64 task_id = 9;
  bool has_task_id() const;
  void clear_task_id();
  static const int kTaskIdFieldNumber = 9;
  ::google::protobuf::uint64 task_id() const;
  void set_task_id(::google::protobuf::uint64 value);

  // optional uint64 packet_id = 10;
  bool has_packet_id() const;
  void clear_packet_id();
  static const int kPacketIdFieldNumber = 10;
  ::google::protobuf::uint64 packet_id() const;
  void set_packet_id(::google::protobuf::uint64 value);

  // required .fs.proto.Request.RequestType req_type = 1;
  bool has_req_type() const;
  void clear_req_type();
  static const int kReqTypeFieldNumber = 1;
  ::fs::proto::Request_RequestType req_type() const;
  void set_req_type(::fs::proto::Request_RequestType value);

  // @@protoc_insertion_point(class_scope:fs.proto.Request)
 private:
  void set_has_req_type();
  void clear_has_req_type();
  void set_has_username();
  void clear_has_username();
  void set_has_password();
  void clear_has_password();
  void set_has_token();
  void clear_has_token();
  void set_has_remote_path();
  void clear_has_remote_path();
  void set_has_filename();
  void clear_has_filename();
  void set_has_packet_no();
  void clear_has_packet_no();
  void set_has_packet();
  void clear_has_packet();
  void set_has_task_id();
  void clear_has_task_id();
  void set_has_packet_id();
  void clear_has_packet_id();
  void set_has_new_path();
  void clear_has_new_path();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::internal::ArenaStringPtr remote_path_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::google::protobuf::internal::ArenaStringPtr new_path_;
  ::fs::proto::Packet* packet_;
  ::google::protobuf::uint64 packet_no_;
  ::google::protobuf::uint64 task_id_;
  ::google::protobuf::uint64 packet_id_;
  int req_type_;
  friend struct ::protobuf_file_5ftransfer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fs.proto.Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Response* other);
  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(NULL);
  }

  Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Response_ResponseType ResponseType;
  static const ResponseType SUCCESS =
    Response_ResponseType_SUCCESS;
  static const ResponseType NOSUCHUSER =
    Response_ResponseType_NOSUCHUSER;
  static const ResponseType ILLEGALPASSWD =
    Response_ResponseType_ILLEGALPASSWD;
  static const ResponseType UNKNOWN =
    Response_ResponseType_UNKNOWN;
  static const ResponseType NORESPONSE =
    Response_ResponseType_NORESPONSE;
  static const ResponseType ILLEGALTOKEN =
    Response_ResponseType_ILLEGALTOKEN;
  static const ResponseType ILLEGALPATH =
    Response_ResponseType_ILLEGALPATH;
  static const ResponseType ILLEGALREQUEST =
    Response_ResponseType_ILLEGALREQUEST;
  static const ResponseType ILLEGALTASKSTATUS =
    Response_ResponseType_ILLEGALTASKSTATUS;
  static const ResponseType ILLEGALTASKID =
    Response_ResponseType_ILLEGALTASKID;
  static const ResponseType ILLEGALPACKETID =
    Response_ResponseType_ILLEGALPACKETID;
  static const ResponseType ILLEGALCLIENTID =
    Response_ResponseType_ILLEGALCLIENTID;
  static inline bool ResponseType_IsValid(int value) {
    return Response_ResponseType_IsValid(value);
  }
  static const ResponseType ResponseType_MIN =
    Response_ResponseType_ResponseType_MIN;
  static const ResponseType ResponseType_MAX =
    Response_ResponseType_ResponseType_MAX;
  static const int ResponseType_ARRAYSIZE =
    Response_ResponseType_ResponseType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ResponseType_descriptor() {
    return Response_ResponseType_descriptor();
  }
  static inline const ::std::string& ResponseType_Name(ResponseType value) {
    return Response_ResponseType_Name(value);
  }
  static inline bool ResponseType_Parse(const ::std::string& name,
      ResponseType* value) {
    return Response_ResponseType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string token = 2;
  bool has_token() const;
  void clear_token();
  static const int kTokenFieldNumber = 2;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // optional .fs.proto.FileList file_list = 3;
  bool has_file_list() const;
  void clear_file_list();
  static const int kFileListFieldNumber = 3;
  private:
  const ::fs::proto::FileList& _internal_file_list() const;
  public:
  const ::fs::proto::FileList& file_list() const;
  ::fs::proto::FileList* release_file_list();
  ::fs::proto::FileList* mutable_file_list();
  void set_allocated_file_list(::fs::proto::FileList* file_list);

  // optional .fs.proto.Packet packet = 7;
  bool has_packet() const;
  void clear_packet();
  static const int kPacketFieldNumber = 7;
  private:
  const ::fs::proto::Packet& _internal_packet() const;
  public:
  const ::fs::proto::Packet& packet() const;
  ::fs::proto::Packet* release_packet();
  ::fs::proto::Packet* mutable_packet();
  void set_allocated_packet(::fs::proto::Packet* packet);

  // optional uint64 task_id = 4;
  bool has_task_id() const;
  void clear_task_id();
  static const int kTaskIdFieldNumber = 4;
  ::google::protobuf::uint64 task_id() const;
  void set_task_id(::google::protobuf::uint64 value);

  // optional uint64 packet_id = 5;
  bool has_packet_id() const;
  void clear_packet_id();
  static const int kPacketIdFieldNumber = 5;
  ::google::protobuf::uint64 packet_id() const;
  void set_packet_id(::google::protobuf::uint64 value);

  // optional uint64 packet_no = 6;
  bool has_packet_no() const;
  void clear_packet_no();
  static const int kPacketNoFieldNumber = 6;
  ::google::protobuf::uint64 packet_no() const;
  void set_packet_no(::google::protobuf::uint64 value);

  // required .fs.proto.Response.ResponseType resp_type = 1;
  bool has_resp_type() const;
  void clear_resp_type();
  static const int kRespTypeFieldNumber = 1;
  ::fs::proto::Response_ResponseType resp_type() const;
  void set_resp_type(::fs::proto::Response_ResponseType value);

  // @@protoc_insertion_point(class_scope:fs.proto.Response)
 private:
  void set_has_resp_type();
  void clear_has_resp_type();
  void set_has_token();
  void clear_has_token();
  void set_has_file_list();
  void clear_has_file_list();
  void set_has_task_id();
  void clear_has_task_id();
  void set_has_packet_id();
  void clear_has_packet_id();
  void set_has_packet_no();
  void clear_has_packet_no();
  void set_has_packet();
  void clear_has_packet();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::fs::proto::FileList* file_list_;
  ::fs::proto::Packet* packet_;
  ::google::protobuf::uint64 task_id_;
  ::google::protobuf::uint64 packet_id_;
  ::google::protobuf::uint64 packet_no_;
  int resp_type_;
  friend struct ::protobuf_file_5ftransfer_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// File

// required string filename = 1;
inline bool File::has_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void File::set_has_filename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void File::clear_has_filename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void File::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
inline const ::std::string& File::filename() const {
  // @@protoc_insertion_point(field_get:fs.proto.File.filename)
  return filename_.GetNoArena();
}
inline void File::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fs.proto.File.filename)
}
#if LANG_CXX11
inline void File::set_filename(::std::string&& value) {
  set_has_filename();
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fs.proto.File.filename)
}
#endif
inline void File::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fs.proto.File.filename)
}
inline void File::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fs.proto.File.filename)
}
inline ::std::string* File::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:fs.proto.File.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* File::release_filename() {
  // @@protoc_insertion_point(field_release:fs.proto.File.filename)
  if (!has_filename()) {
    return NULL;
  }
  clear_has_filename();
  return filename_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void File::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:fs.proto.File.filename)
}

// required uint64 mtime = 2;
inline bool File::has_mtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void File::set_has_mtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void File::clear_has_mtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void File::clear_mtime() {
  mtime_ = GOOGLE_ULONGLONG(0);
  clear_has_mtime();
}
inline ::google::protobuf::uint64 File::mtime() const {
  // @@protoc_insertion_point(field_get:fs.proto.File.mtime)
  return mtime_;
}
inline void File::set_mtime(::google::protobuf::uint64 value) {
  set_has_mtime();
  mtime_ = value;
  // @@protoc_insertion_point(field_set:fs.proto.File.mtime)
}

// required .fs.proto.File.FileType file_type = 3;
inline bool File::has_file_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void File::set_has_file_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void File::clear_has_file_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void File::clear_file_type() {
  file_type_ = 0;
  clear_has_file_type();
}
inline ::fs::proto::File_FileType File::file_type() const {
  // @@protoc_insertion_point(field_get:fs.proto.File.file_type)
  return static_cast< ::fs::proto::File_FileType >(file_type_);
}
inline void File::set_file_type(::fs::proto::File_FileType value) {
  assert(::fs::proto::File_FileType_IsValid(value));
  set_has_file_type();
  file_type_ = value;
  // @@protoc_insertion_point(field_set:fs.proto.File.file_type)
}

// optional uint64 size = 4;
inline bool File::has_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void File::set_has_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void File::clear_has_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void File::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
  clear_has_size();
}
inline ::google::protobuf::uint64 File::size() const {
  // @@protoc_insertion_point(field_get:fs.proto.File.size)
  return size_;
}
inline void File::set_size(::google::protobuf::uint64 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:fs.proto.File.size)
}

// -------------------------------------------------------------------

// FileList

// required string path = 1;
inline bool FileList::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileList::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileList::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileList::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_path();
}
inline const ::std::string& FileList::path() const {
  // @@protoc_insertion_point(field_get:fs.proto.FileList.path)
  return path_.GetNoArena();
}
inline void FileList::set_path(const ::std::string& value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fs.proto.FileList.path)
}
#if LANG_CXX11
inline void FileList::set_path(::std::string&& value) {
  set_has_path();
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fs.proto.FileList.path)
}
#endif
inline void FileList::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fs.proto.FileList.path)
}
inline void FileList::set_path(const char* value, size_t size) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fs.proto.FileList.path)
}
inline ::std::string* FileList::mutable_path() {
  set_has_path();
  // @@protoc_insertion_point(field_mutable:fs.proto.FileList.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileList::release_path() {
  // @@protoc_insertion_point(field_release:fs.proto.FileList.path)
  if (!has_path()) {
    return NULL;
  }
  clear_has_path();
  return path_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileList::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    set_has_path();
  } else {
    clear_has_path();
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:fs.proto.FileList.path)
}

// repeated .fs.proto.File file = 2;
inline int FileList::file_size() const {
  return file_.size();
}
inline void FileList::clear_file() {
  file_.Clear();
}
inline ::fs::proto::File* FileList::mutable_file(int index) {
  // @@protoc_insertion_point(field_mutable:fs.proto.FileList.file)
  return file_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::fs::proto::File >*
FileList::mutable_file() {
  // @@protoc_insertion_point(field_mutable_list:fs.proto.FileList.file)
  return &file_;
}
inline const ::fs::proto::File& FileList::file(int index) const {
  // @@protoc_insertion_point(field_get:fs.proto.FileList.file)
  return file_.Get(index);
}
inline ::fs::proto::File* FileList::add_file() {
  // @@protoc_insertion_point(field_add:fs.proto.FileList.file)
  return file_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::fs::proto::File >&
FileList::file() const {
  // @@protoc_insertion_point(field_list:fs.proto.FileList.file)
  return file_;
}

// -------------------------------------------------------------------

// Packet

// required uint64 packet_id = 1;
inline bool Packet::has_packet_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Packet::set_has_packet_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Packet::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Packet::clear_packet_id() {
  packet_id_ = GOOGLE_ULONGLONG(0);
  clear_has_packet_id();
}
inline ::google::protobuf::uint64 Packet::packet_id() const {
  // @@protoc_insertion_point(field_get:fs.proto.Packet.packet_id)
  return packet_id_;
}
inline void Packet::set_packet_id(::google::protobuf::uint64 value) {
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:fs.proto.Packet.packet_id)
}

// required bytes data = 2;
inline bool Packet::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Packet::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Packet::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Packet::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& Packet::data() const {
  // @@protoc_insertion_point(field_get:fs.proto.Packet.data)
  return data_.GetNoArena();
}
inline void Packet::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fs.proto.Packet.data)
}
#if LANG_CXX11
inline void Packet::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fs.proto.Packet.data)
}
#endif
inline void Packet::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fs.proto.Packet.data)
}
inline void Packet::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fs.proto.Packet.data)
}
inline ::std::string* Packet::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:fs.proto.Packet.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Packet::release_data() {
  // @@protoc_insertion_point(field_release:fs.proto.Packet.data)
  if (!has_data()) {
    return NULL;
  }
  clear_has_data();
  return data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Packet::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:fs.proto.Packet.data)
}

// -------------------------------------------------------------------

// Request

// required .fs.proto.Request.RequestType req_type = 1;
inline bool Request::has_req_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Request::set_has_req_type() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Request::clear_has_req_type() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Request::clear_req_type() {
  req_type_ = 0;
  clear_has_req_type();
}
inline ::fs::proto::Request_RequestType Request::req_type() const {
  // @@protoc_insertion_point(field_get:fs.proto.Request.req_type)
  return static_cast< ::fs::proto::Request_RequestType >(req_type_);
}
inline void Request::set_req_type(::fs::proto::Request_RequestType value) {
  assert(::fs::proto::Request_RequestType_IsValid(value));
  set_has_req_type();
  req_type_ = value;
  // @@protoc_insertion_point(field_set:fs.proto.Request.req_type)
}

// optional string username = 2;
inline bool Request::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& Request::username() const {
  // @@protoc_insertion_point(field_get:fs.proto.Request.username)
  return username_.GetNoArena();
}
inline void Request::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fs.proto.Request.username)
}
#if LANG_CXX11
inline void Request::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fs.proto.Request.username)
}
#endif
inline void Request::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fs.proto.Request.username)
}
inline void Request::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fs.proto.Request.username)
}
inline ::std::string* Request::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:fs.proto.Request.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_username() {
  // @@protoc_insertion_point(field_release:fs.proto.Request.username)
  if (!has_username()) {
    return NULL;
  }
  clear_has_username();
  return username_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:fs.proto.Request.username)
}

// optional string password = 3;
inline bool Request::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Request::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Request::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Request::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
inline const ::std::string& Request::password() const {
  // @@protoc_insertion_point(field_get:fs.proto.Request.password)
  return password_.GetNoArena();
}
inline void Request::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fs.proto.Request.password)
}
#if LANG_CXX11
inline void Request::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fs.proto.Request.password)
}
#endif
inline void Request::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fs.proto.Request.password)
}
inline void Request::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fs.proto.Request.password)
}
inline ::std::string* Request::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:fs.proto.Request.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_password() {
  // @@protoc_insertion_point(field_release:fs.proto.Request.password)
  if (!has_password()) {
    return NULL;
  }
  clear_has_password();
  return password_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:fs.proto.Request.password)
}

// optional string token = 4;
inline bool Request::has_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Request::set_has_token() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Request::clear_has_token() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Request::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
inline const ::std::string& Request::token() const {
  // @@protoc_insertion_point(field_get:fs.proto.Request.token)
  return token_.GetNoArena();
}
inline void Request::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fs.proto.Request.token)
}
#if LANG_CXX11
inline void Request::set_token(::std::string&& value) {
  set_has_token();
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fs.proto.Request.token)
}
#endif
inline void Request::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fs.proto.Request.token)
}
inline void Request::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fs.proto.Request.token)
}
inline ::std::string* Request::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:fs.proto.Request.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_token() {
  // @@protoc_insertion_point(field_release:fs.proto.Request.token)
  if (!has_token()) {
    return NULL;
  }
  clear_has_token();
  return token_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:fs.proto.Request.token)
}

// optional string remote_path = 5;
inline bool Request::has_remote_path() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Request::set_has_remote_path() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Request::clear_has_remote_path() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Request::clear_remote_path() {
  remote_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_remote_path();
}
inline const ::std::string& Request::remote_path() const {
  // @@protoc_insertion_point(field_get:fs.proto.Request.remote_path)
  return remote_path_.GetNoArena();
}
inline void Request::set_remote_path(const ::std::string& value) {
  set_has_remote_path();
  remote_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fs.proto.Request.remote_path)
}
#if LANG_CXX11
inline void Request::set_remote_path(::std::string&& value) {
  set_has_remote_path();
  remote_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fs.proto.Request.remote_path)
}
#endif
inline void Request::set_remote_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_remote_path();
  remote_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fs.proto.Request.remote_path)
}
inline void Request::set_remote_path(const char* value, size_t size) {
  set_has_remote_path();
  remote_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fs.proto.Request.remote_path)
}
inline ::std::string* Request::mutable_remote_path() {
  set_has_remote_path();
  // @@protoc_insertion_point(field_mutable:fs.proto.Request.remote_path)
  return remote_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_remote_path() {
  // @@protoc_insertion_point(field_release:fs.proto.Request.remote_path)
  if (!has_remote_path()) {
    return NULL;
  }
  clear_has_remote_path();
  return remote_path_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_remote_path(::std::string* remote_path) {
  if (remote_path != NULL) {
    set_has_remote_path();
  } else {
    clear_has_remote_path();
  }
  remote_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remote_path);
  // @@protoc_insertion_point(field_set_allocated:fs.proto.Request.remote_path)
}

// optional string filename = 6;
inline bool Request::has_filename() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Request::set_has_filename() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Request::clear_has_filename() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Request::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
inline const ::std::string& Request::filename() const {
  // @@protoc_insertion_point(field_get:fs.proto.Request.filename)
  return filename_.GetNoArena();
}
inline void Request::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fs.proto.Request.filename)
}
#if LANG_CXX11
inline void Request::set_filename(::std::string&& value) {
  set_has_filename();
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fs.proto.Request.filename)
}
#endif
inline void Request::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fs.proto.Request.filename)
}
inline void Request::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fs.proto.Request.filename)
}
inline ::std::string* Request::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:fs.proto.Request.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_filename() {
  // @@protoc_insertion_point(field_release:fs.proto.Request.filename)
  if (!has_filename()) {
    return NULL;
  }
  clear_has_filename();
  return filename_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:fs.proto.Request.filename)
}

// optional uint64 packet_no = 7;
inline bool Request::has_packet_no() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Request::set_has_packet_no() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Request::clear_has_packet_no() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Request::clear_packet_no() {
  packet_no_ = GOOGLE_ULONGLONG(0);
  clear_has_packet_no();
}
inline ::google::protobuf::uint64 Request::packet_no() const {
  // @@protoc_insertion_point(field_get:fs.proto.Request.packet_no)
  return packet_no_;
}
inline void Request::set_packet_no(::google::protobuf::uint64 value) {
  set_has_packet_no();
  packet_no_ = value;
  // @@protoc_insertion_point(field_set:fs.proto.Request.packet_no)
}

// optional .fs.proto.Packet packet = 8;
inline bool Request::has_packet() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Request::set_has_packet() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Request::clear_has_packet() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Request::clear_packet() {
  if (packet_ != NULL) packet_->Clear();
  clear_has_packet();
}
inline const ::fs::proto::Packet& Request::_internal_packet() const {
  return *packet_;
}
inline const ::fs::proto::Packet& Request::packet() const {
  const ::fs::proto::Packet* p = packet_;
  // @@protoc_insertion_point(field_get:fs.proto.Request.packet)
  return p != NULL ? *p : *reinterpret_cast<const ::fs::proto::Packet*>(
      &::fs::proto::_Packet_default_instance_);
}
inline ::fs::proto::Packet* Request::release_packet() {
  // @@protoc_insertion_point(field_release:fs.proto.Request.packet)
  clear_has_packet();
  ::fs::proto::Packet* temp = packet_;
  packet_ = NULL;
  return temp;
}
inline ::fs::proto::Packet* Request::mutable_packet() {
  set_has_packet();
  if (packet_ == NULL) {
    auto* p = CreateMaybeMessage<::fs::proto::Packet>(GetArenaNoVirtual());
    packet_ = p;
  }
  // @@protoc_insertion_point(field_mutable:fs.proto.Request.packet)
  return packet_;
}
inline void Request::set_allocated_packet(::fs::proto::Packet* packet) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete packet_;
  }
  if (packet) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      packet = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, packet, submessage_arena);
    }
    set_has_packet();
  } else {
    clear_has_packet();
  }
  packet_ = packet;
  // @@protoc_insertion_point(field_set_allocated:fs.proto.Request.packet)
}

// optional uint64 task_id = 9;
inline bool Request::has_task_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Request::set_has_task_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Request::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Request::clear_task_id() {
  task_id_ = GOOGLE_ULONGLONG(0);
  clear_has_task_id();
}
inline ::google::protobuf::uint64 Request::task_id() const {
  // @@protoc_insertion_point(field_get:fs.proto.Request.task_id)
  return task_id_;
}
inline void Request::set_task_id(::google::protobuf::uint64 value) {
  set_has_task_id();
  task_id_ = value;
  // @@protoc_insertion_point(field_set:fs.proto.Request.task_id)
}

// optional uint64 packet_id = 10;
inline bool Request::has_packet_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Request::set_has_packet_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Request::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Request::clear_packet_id() {
  packet_id_ = GOOGLE_ULONGLONG(0);
  clear_has_packet_id();
}
inline ::google::protobuf::uint64 Request::packet_id() const {
  // @@protoc_insertion_point(field_get:fs.proto.Request.packet_id)
  return packet_id_;
}
inline void Request::set_packet_id(::google::protobuf::uint64 value) {
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:fs.proto.Request.packet_id)
}

// optional string new_path = 11;
inline bool Request::has_new_path() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Request::set_has_new_path() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Request::clear_has_new_path() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Request::clear_new_path() {
  new_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_new_path();
}
inline const ::std::string& Request::new_path() const {
  // @@protoc_insertion_point(field_get:fs.proto.Request.new_path)
  return new_path_.GetNoArena();
}
inline void Request::set_new_path(const ::std::string& value) {
  set_has_new_path();
  new_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fs.proto.Request.new_path)
}
#if LANG_CXX11
inline void Request::set_new_path(::std::string&& value) {
  set_has_new_path();
  new_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fs.proto.Request.new_path)
}
#endif
inline void Request::set_new_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_new_path();
  new_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fs.proto.Request.new_path)
}
inline void Request::set_new_path(const char* value, size_t size) {
  set_has_new_path();
  new_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fs.proto.Request.new_path)
}
inline ::std::string* Request::mutable_new_path() {
  set_has_new_path();
  // @@protoc_insertion_point(field_mutable:fs.proto.Request.new_path)
  return new_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_new_path() {
  // @@protoc_insertion_point(field_release:fs.proto.Request.new_path)
  if (!has_new_path()) {
    return NULL;
  }
  clear_has_new_path();
  return new_path_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_new_path(::std::string* new_path) {
  if (new_path != NULL) {
    set_has_new_path();
  } else {
    clear_has_new_path();
  }
  new_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), new_path);
  // @@protoc_insertion_point(field_set_allocated:fs.proto.Request.new_path)
}

// -------------------------------------------------------------------

// Response

// required .fs.proto.Response.ResponseType resp_type = 1;
inline bool Response::has_resp_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Response::set_has_resp_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Response::clear_has_resp_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Response::clear_resp_type() {
  resp_type_ = 0;
  clear_has_resp_type();
}
inline ::fs::proto::Response_ResponseType Response::resp_type() const {
  // @@protoc_insertion_point(field_get:fs.proto.Response.resp_type)
  return static_cast< ::fs::proto::Response_ResponseType >(resp_type_);
}
inline void Response::set_resp_type(::fs::proto::Response_ResponseType value) {
  assert(::fs::proto::Response_ResponseType_IsValid(value));
  set_has_resp_type();
  resp_type_ = value;
  // @@protoc_insertion_point(field_set:fs.proto.Response.resp_type)
}

// optional string token = 2;
inline bool Response::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Response::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Response::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
inline const ::std::string& Response::token() const {
  // @@protoc_insertion_point(field_get:fs.proto.Response.token)
  return token_.GetNoArena();
}
inline void Response::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fs.proto.Response.token)
}
#if LANG_CXX11
inline void Response::set_token(::std::string&& value) {
  set_has_token();
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fs.proto.Response.token)
}
#endif
inline void Response::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fs.proto.Response.token)
}
inline void Response::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fs.proto.Response.token)
}
inline ::std::string* Response::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:fs.proto.Response.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response::release_token() {
  // @@protoc_insertion_point(field_release:fs.proto.Response.token)
  if (!has_token()) {
    return NULL;
  }
  clear_has_token();
  return token_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:fs.proto.Response.token)
}

// optional .fs.proto.FileList file_list = 3;
inline bool Response::has_file_list() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Response::set_has_file_list() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Response::clear_has_file_list() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Response::clear_file_list() {
  if (file_list_ != NULL) file_list_->Clear();
  clear_has_file_list();
}
inline const ::fs::proto::FileList& Response::_internal_file_list() const {
  return *file_list_;
}
inline const ::fs::proto::FileList& Response::file_list() const {
  const ::fs::proto::FileList* p = file_list_;
  // @@protoc_insertion_point(field_get:fs.proto.Response.file_list)
  return p != NULL ? *p : *reinterpret_cast<const ::fs::proto::FileList*>(
      &::fs::proto::_FileList_default_instance_);
}
inline ::fs::proto::FileList* Response::release_file_list() {
  // @@protoc_insertion_point(field_release:fs.proto.Response.file_list)
  clear_has_file_list();
  ::fs::proto::FileList* temp = file_list_;
  file_list_ = NULL;
  return temp;
}
inline ::fs::proto::FileList* Response::mutable_file_list() {
  set_has_file_list();
  if (file_list_ == NULL) {
    auto* p = CreateMaybeMessage<::fs::proto::FileList>(GetArenaNoVirtual());
    file_list_ = p;
  }
  // @@protoc_insertion_point(field_mutable:fs.proto.Response.file_list)
  return file_list_;
}
inline void Response::set_allocated_file_list(::fs::proto::FileList* file_list) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete file_list_;
  }
  if (file_list) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      file_list = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, file_list, submessage_arena);
    }
    set_has_file_list();
  } else {
    clear_has_file_list();
  }
  file_list_ = file_list;
  // @@protoc_insertion_point(field_set_allocated:fs.proto.Response.file_list)
}

// optional uint64 task_id = 4;
inline bool Response::has_task_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Response::set_has_task_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Response::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Response::clear_task_id() {
  task_id_ = GOOGLE_ULONGLONG(0);
  clear_has_task_id();
}
inline ::google::protobuf::uint64 Response::task_id() const {
  // @@protoc_insertion_point(field_get:fs.proto.Response.task_id)
  return task_id_;
}
inline void Response::set_task_id(::google::protobuf::uint64 value) {
  set_has_task_id();
  task_id_ = value;
  // @@protoc_insertion_point(field_set:fs.proto.Response.task_id)
}

// optional uint64 packet_id = 5;
inline bool Response::has_packet_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Response::set_has_packet_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Response::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Response::clear_packet_id() {
  packet_id_ = GOOGLE_ULONGLONG(0);
  clear_has_packet_id();
}
inline ::google::protobuf::uint64 Response::packet_id() const {
  // @@protoc_insertion_point(field_get:fs.proto.Response.packet_id)
  return packet_id_;
}
inline void Response::set_packet_id(::google::protobuf::uint64 value) {
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:fs.proto.Response.packet_id)
}

// optional uint64 packet_no = 6;
inline bool Response::has_packet_no() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Response::set_has_packet_no() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Response::clear_has_packet_no() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Response::clear_packet_no() {
  packet_no_ = GOOGLE_ULONGLONG(0);
  clear_has_packet_no();
}
inline ::google::protobuf::uint64 Response::packet_no() const {
  // @@protoc_insertion_point(field_get:fs.proto.Response.packet_no)
  return packet_no_;
}
inline void Response::set_packet_no(::google::protobuf::uint64 value) {
  set_has_packet_no();
  packet_no_ = value;
  // @@protoc_insertion_point(field_set:fs.proto.Response.packet_no)
}

// optional .fs.proto.Packet packet = 7;
inline bool Response::has_packet() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Response::set_has_packet() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Response::clear_has_packet() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Response::clear_packet() {
  if (packet_ != NULL) packet_->Clear();
  clear_has_packet();
}
inline const ::fs::proto::Packet& Response::_internal_packet() const {
  return *packet_;
}
inline const ::fs::proto::Packet& Response::packet() const {
  const ::fs::proto::Packet* p = packet_;
  // @@protoc_insertion_point(field_get:fs.proto.Response.packet)
  return p != NULL ? *p : *reinterpret_cast<const ::fs::proto::Packet*>(
      &::fs::proto::_Packet_default_instance_);
}
inline ::fs::proto::Packet* Response::release_packet() {
  // @@protoc_insertion_point(field_release:fs.proto.Response.packet)
  clear_has_packet();
  ::fs::proto::Packet* temp = packet_;
  packet_ = NULL;
  return temp;
}
inline ::fs::proto::Packet* Response::mutable_packet() {
  set_has_packet();
  if (packet_ == NULL) {
    auto* p = CreateMaybeMessage<::fs::proto::Packet>(GetArenaNoVirtual());
    packet_ = p;
  }
  // @@protoc_insertion_point(field_mutable:fs.proto.Response.packet)
  return packet_;
}
inline void Response::set_allocated_packet(::fs::proto::Packet* packet) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete packet_;
  }
  if (packet) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      packet = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, packet, submessage_arena);
    }
    set_has_packet();
  } else {
    clear_has_packet();
  }
  packet_ = packet;
  // @@protoc_insertion_point(field_set_allocated:fs.proto.Response.packet)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace fs

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::fs::proto::File_FileType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fs::proto::File_FileType>() {
  return ::fs::proto::File_FileType_descriptor();
}
template <> struct is_proto_enum< ::fs::proto::Request_RequestType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fs::proto::Request_RequestType>() {
  return ::fs::proto::Request_RequestType_descriptor();
}
template <> struct is_proto_enum< ::fs::proto::Response_ResponseType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fs::proto::Response_ResponseType>() {
  return ::fs::proto::Response_ResponseType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_file_5ftransfer_2eproto
