syntax = "proto2";

package fs.proto;

message File
{
	enum FileType
	{
		REGULAR				= 0;
		DIRECTORY			= 1;
		SYMLINK				= 2;
		OTHER				= 3;
	}
	required string filename	= 1;
	required uint64 mtime		= 2;	// time of last data modification
	required FileType file_type	= 3;
	optional uint64 size		= 4;	// only valid for REGULAR file
}

message FileList
{
	required string path		= 1;
    	repeated File file		= 2;
}



message Packet
{
	required uint64 packet_id 	= 1;
	required bytes data 		= 2;
}

message Request
{
	enum RequestType
	{
		LOGIN				= 10;	// try to login
		FILELIST			= 0;	// request for a filelist
                MKDIR				= 8;	// create a new directory
		UPLOAD				= 1;	// initiate a new UPLOAD task

		
		DOWNLOAD			= 2;	// initiate a new DOWNLOAD task
		CANCEL				= 3;	// cancel a task
		PAUSE				= 4;	// pause a task
		RESUME				= 5;	// resume a task
		RENAME				= 6;	// rename or move a existing file
		REMOVE				= 7;	// delete a file
		PACKET				= 9;	// send a packet

	}
	required RequestType req_type	= 1;
	optional string username	= 2;
	optional string password	= 3;
	optional string token		= 4;
	optional string remote_path	= 5;
	optional string filename	= 6;
	optional uint64 packet_no	= 7;	// number of packets that a UPLOAD task will send
	
	optional uint64 task_id		= 8;	// task_id of which CANCEL/PAUSE/RESUME/PACKET
	optional string new_path	= 9;	// new path of a RENAMEd file
	optional Packet packet		= 10;
}


message Response
{
	enum ResponseType
	{
		SUCCESS				= 0;
		NOSUCHUSER			= 1;	// no such user
		ILLEGALPASSWD			= 2;	// pasword is not correct
		UNKNOWN				= 3;	// unkown error
		NORESPONSE			= 4;	// cannot get response from server
		ILLEGALTOKEN			= 5;	// token is illegal relogin is needed
		ILLEGALPATH			= 6;	// filepath is illegal
		ILLEGALREQUEST			= 7;	// received request contains unknown req_type

	}
	required ResponseType resp_type	= 1;
	optional string	token		= 5;	// token generate by server when login successfully
	optional FileList file_list   	= 2;
	
	optional uint64 task_id		= 3;	// task_id of a UPLOAD task
	optional uint64 packet_no	= 4;	// number of packets that a DOWNLOAD task will receive
	
}





