// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fs_task.proto

#include "fs_task.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_fs_5ftask_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_fs_5ftask_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Task;
}  // namespace protobuf_fs_5ftask_2eproto
namespace fs {
namespace proto {
class TaskDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Task>
      _instance;
} _Task_default_instance_;
class TasksDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Tasks>
      _instance;
} _Tasks_default_instance_;
}  // namespace proto
}  // namespace fs
namespace protobuf_fs_5ftask_2eproto {
static void InitDefaultsTask() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::proto::_Task_default_instance_;
    new (ptr) ::fs::proto::Task();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::proto::Task::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Task =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTask}, {}};

static void InitDefaultsTasks() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fs::proto::_Tasks_default_instance_;
    new (ptr) ::fs::proto::Tasks();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fs::proto::Tasks::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Tasks =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTasks}, {
      &protobuf_fs_5ftask_2eproto::scc_info_Task.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Task.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Tasks.base);
}

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fs::proto::Task, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fs::proto::Task, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fs::proto::Task, task_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fs::proto::Task, localbasepath_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fs::proto::Task, remotebasepath_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fs::proto::Task, filename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fs::proto::Task, total_packet_no_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fs::proto::Task, task_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fs::proto::Task, received_packet_no_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fs::proto::Task, sent_packet_no_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fs::proto::Task, last_packet_time_),
  3,
  0,
  1,
  2,
  4,
  8,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fs::proto::Tasks, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fs::proto::Tasks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fs::proto::Tasks, task_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, sizeof(::fs::proto::Task)},
  { 23, 29, sizeof(::fs::proto::Tasks)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::fs::proto::_Task_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fs::proto::_Tasks_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "fs_task.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rfs_task.proto\022\010fs.proto\"\205\004\n\004Task\022\017\n\007ta"
      "sk_id\030\001 \002(\004\022\025\n\rlocalbasepath\030\002 \002(\t\022\026\n\016re"
      "motebasepath\030\003 \002(\t\022\020\n\010filename\030\004 \002(\t\022\027\n\017"
      "total_packet_no\030\005 \002(\004\022.\n\013task_status\030\006 \002"
      "(\0162\031.fs.proto.Task.TaskStatus\022\032\n\022receive"
      "d_packet_no\030\007 \001(\004\022\026\n\016sent_packet_no\030\010 \001("
      "\004\022\030\n\020last_packet_time\030\t \001(\004\"\223\002\n\nTaskStat"
      "us\022\017\n\013UPLOAD_INIT\020\000\022\r\n\tUPLOADING\020\001\022\014\n\010UP"
      "LOADED\020\002\022\021\n\rUPLOAD_PAUSED\020\003\022\022\n\016UPLOAD_PA"
      "USING\020\004\022\021\n\rUPLOAD_RESUME\020\005\022\021\n\rDOWNLOAD_I"
      "NIT\020\006\022\017\n\013DOWNLOADING\020\007\022\016\n\nDOWNLOADED\020\010\022\023"
      "\n\017DOWNLOAD_PAUSED\020\t\022\024\n\020DOWNLOAD_PAUSING\020"
      "\n\022\023\n\017DOWNLOAD_RESUME\020\013\022\023\n\017CANCELED_PAUSE"
      "D\020\014\022\024\n\020CANCELED_WORKING\020\r\"%\n\005Tasks\022\034\n\004ta"
      "sk\030\001 \003(\0132\016.fs.proto.Task"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 584);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fs_task.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_fs_5ftask_2eproto
namespace fs {
namespace proto {
const ::google::protobuf::EnumDescriptor* Task_TaskStatus_descriptor() {
  protobuf_fs_5ftask_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fs_5ftask_2eproto::file_level_enum_descriptors[0];
}
bool Task_TaskStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Task_TaskStatus Task::UPLOAD_INIT;
const Task_TaskStatus Task::UPLOADING;
const Task_TaskStatus Task::UPLOADED;
const Task_TaskStatus Task::UPLOAD_PAUSED;
const Task_TaskStatus Task::UPLOAD_PAUSING;
const Task_TaskStatus Task::UPLOAD_RESUME;
const Task_TaskStatus Task::DOWNLOAD_INIT;
const Task_TaskStatus Task::DOWNLOADING;
const Task_TaskStatus Task::DOWNLOADED;
const Task_TaskStatus Task::DOWNLOAD_PAUSED;
const Task_TaskStatus Task::DOWNLOAD_PAUSING;
const Task_TaskStatus Task::DOWNLOAD_RESUME;
const Task_TaskStatus Task::CANCELED_PAUSED;
const Task_TaskStatus Task::CANCELED_WORKING;
const Task_TaskStatus Task::TaskStatus_MIN;
const Task_TaskStatus Task::TaskStatus_MAX;
const int Task::TaskStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Task::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Task::kTaskIdFieldNumber;
const int Task::kLocalbasepathFieldNumber;
const int Task::kRemotebasepathFieldNumber;
const int Task::kFilenameFieldNumber;
const int Task::kTotalPacketNoFieldNumber;
const int Task::kTaskStatusFieldNumber;
const int Task::kReceivedPacketNoFieldNumber;
const int Task::kSentPacketNoFieldNumber;
const int Task::kLastPacketTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Task::Task()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_fs_5ftask_2eproto::scc_info_Task.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:fs.proto.Task)
}
Task::Task(const Task& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  localbasepath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_localbasepath()) {
    localbasepath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.localbasepath_);
  }
  remotebasepath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_remotebasepath()) {
    remotebasepath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.remotebasepath_);
  }
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_filename()) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  ::memcpy(&task_id_, &from.task_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&task_status_) -
    reinterpret_cast<char*>(&task_id_)) + sizeof(task_status_));
  // @@protoc_insertion_point(copy_constructor:fs.proto.Task)
}

void Task::SharedCtor() {
  localbasepath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remotebasepath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&task_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&task_status_) -
      reinterpret_cast<char*>(&task_id_)) + sizeof(task_status_));
}

Task::~Task() {
  // @@protoc_insertion_point(destructor:fs.proto.Task)
  SharedDtor();
}

void Task::SharedDtor() {
  localbasepath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remotebasepath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Task::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Task::descriptor() {
  ::protobuf_fs_5ftask_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fs_5ftask_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Task& Task::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_fs_5ftask_2eproto::scc_info_Task.base);
  return *internal_default_instance();
}


void Task::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.proto.Task)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      localbasepath_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      remotebasepath_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      filename_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&task_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_packet_time_) -
        reinterpret_cast<char*>(&task_id_)) + sizeof(last_packet_time_));
  }
  task_status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Task::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fs.proto.Task)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 task_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_task_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &task_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string localbasepath = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_localbasepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->localbasepath().data(), static_cast<int>(this->localbasepath().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fs.proto.Task.localbasepath");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string remotebasepath = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remotebasepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->remotebasepath().data(), static_cast<int>(this->remotebasepath().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fs.proto.Task.remotebasepath");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string filename = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), static_cast<int>(this->filename().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fs.proto.Task.filename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 total_packet_no = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_total_packet_no();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_packet_no_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .fs.proto.Task.TaskStatus task_status = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fs::proto::Task_TaskStatus_IsValid(value)) {
            set_task_status(static_cast< ::fs::proto::Task_TaskStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 received_packet_no = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_received_packet_no();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &received_packet_no_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 sent_packet_no = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_sent_packet_no();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sent_packet_no_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 last_packet_time = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_last_packet_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_packet_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fs.proto.Task)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fs.proto.Task)
  return false;
#undef DO_
}

void Task::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fs.proto.Task)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 task_id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->task_id(), output);
  }

  // required string localbasepath = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->localbasepath().data(), static_cast<int>(this->localbasepath().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fs.proto.Task.localbasepath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->localbasepath(), output);
  }

  // required string remotebasepath = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remotebasepath().data(), static_cast<int>(this->remotebasepath().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fs.proto.Task.remotebasepath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->remotebasepath(), output);
  }

  // required string filename = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fs.proto.Task.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->filename(), output);
  }

  // required uint64 total_packet_no = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->total_packet_no(), output);
  }

  // required .fs.proto.Task.TaskStatus task_status = 6;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->task_status(), output);
  }

  // optional uint64 received_packet_no = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->received_packet_no(), output);
  }

  // optional uint64 sent_packet_no = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->sent_packet_no(), output);
  }

  // optional uint64 last_packet_time = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->last_packet_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fs.proto.Task)
}

::google::protobuf::uint8* Task::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fs.proto.Task)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 task_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->task_id(), target);
  }

  // required string localbasepath = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->localbasepath().data(), static_cast<int>(this->localbasepath().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fs.proto.Task.localbasepath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->localbasepath(), target);
  }

  // required string remotebasepath = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remotebasepath().data(), static_cast<int>(this->remotebasepath().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fs.proto.Task.remotebasepath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->remotebasepath(), target);
  }

  // required string filename = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fs.proto.Task.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->filename(), target);
  }

  // required uint64 total_packet_no = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->total_packet_no(), target);
  }

  // required .fs.proto.Task.TaskStatus task_status = 6;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->task_status(), target);
  }

  // optional uint64 received_packet_no = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->received_packet_no(), target);
  }

  // optional uint64 sent_packet_no = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->sent_packet_no(), target);
  }

  // optional uint64 last_packet_time = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->last_packet_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.proto.Task)
  return target;
}

size_t Task::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:fs.proto.Task)
  size_t total_size = 0;

  if (has_localbasepath()) {
    // required string localbasepath = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->localbasepath());
  }

  if (has_remotebasepath()) {
    // required string remotebasepath = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->remotebasepath());
  }

  if (has_filename()) {
    // required string filename = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }

  if (has_task_id()) {
    // required uint64 task_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->task_id());
  }

  if (has_total_packet_no()) {
    // required uint64 total_packet_no = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->total_packet_no());
  }

  if (has_task_status()) {
    // required .fs.proto.Task.TaskStatus task_status = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->task_status());
  }

  return total_size;
}
size_t Task::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.proto.Task)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000011f) ^ 0x0000011f) == 0) {  // All required fields are present.
    // required string localbasepath = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->localbasepath());

    // required string remotebasepath = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->remotebasepath());

    // required string filename = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());

    // required uint64 task_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->task_id());

    // required uint64 total_packet_no = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->total_packet_no());

    // required .fs.proto.Task.TaskStatus task_status = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->task_status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 224u) {
    // optional uint64 received_packet_no = 7;
    if (has_received_packet_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->received_packet_no());
    }

    // optional uint64 sent_packet_no = 8;
    if (has_sent_packet_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sent_packet_no());
    }

    // optional uint64 last_packet_time = 9;
    if (has_last_packet_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_packet_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Task::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.proto.Task)
  GOOGLE_DCHECK_NE(&from, this);
  const Task* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Task>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.proto.Task)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.proto.Task)
    MergeFrom(*source);
  }
}

void Task::MergeFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.proto.Task)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_localbasepath();
      localbasepath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.localbasepath_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_remotebasepath();
      remotebasepath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.remotebasepath_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_filename();
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (cached_has_bits & 0x00000008u) {
      task_id_ = from.task_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      total_packet_no_ = from.total_packet_no_;
    }
    if (cached_has_bits & 0x00000020u) {
      received_packet_no_ = from.received_packet_no_;
    }
    if (cached_has_bits & 0x00000040u) {
      sent_packet_no_ = from.sent_packet_no_;
    }
    if (cached_has_bits & 0x00000080u) {
      last_packet_time_ = from.last_packet_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_task_status(from.task_status());
  }
}

void Task::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.proto.Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Task::CopyFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.proto.Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Task::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000011f) != 0x0000011f) return false;
  return true;
}

void Task::Swap(Task* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Task::InternalSwap(Task* other) {
  using std::swap;
  localbasepath_.Swap(&other->localbasepath_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  remotebasepath_.Swap(&other->remotebasepath_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filename_.Swap(&other->filename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(task_id_, other->task_id_);
  swap(total_packet_no_, other->total_packet_no_);
  swap(received_packet_no_, other->received_packet_no_);
  swap(sent_packet_no_, other->sent_packet_no_);
  swap(last_packet_time_, other->last_packet_time_);
  swap(task_status_, other->task_status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Task::GetMetadata() const {
  protobuf_fs_5ftask_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fs_5ftask_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Tasks::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tasks::kTaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tasks::Tasks()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_fs_5ftask_2eproto::scc_info_Tasks.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:fs.proto.Tasks)
}
Tasks::Tasks(const Tasks& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      task_(from.task_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fs.proto.Tasks)
}

void Tasks::SharedCtor() {
}

Tasks::~Tasks() {
  // @@protoc_insertion_point(destructor:fs.proto.Tasks)
  SharedDtor();
}

void Tasks::SharedDtor() {
}

void Tasks::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Tasks::descriptor() {
  ::protobuf_fs_5ftask_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fs_5ftask_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Tasks& Tasks::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_fs_5ftask_2eproto::scc_info_Tasks.base);
  return *internal_default_instance();
}


void Tasks::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.proto.Tasks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Tasks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fs.proto.Tasks)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .fs.proto.Task task = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_task()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fs.proto.Tasks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fs.proto.Tasks)
  return false;
#undef DO_
}

void Tasks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fs.proto.Tasks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .fs.proto.Task task = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->task_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->task(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fs.proto.Tasks)
}

::google::protobuf::uint8* Tasks::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fs.proto.Tasks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .fs.proto.Task task = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->task_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->task(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.proto.Tasks)
  return target;
}

size_t Tasks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.proto.Tasks)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .fs.proto.Task task = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->task_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->task(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tasks::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fs.proto.Tasks)
  GOOGLE_DCHECK_NE(&from, this);
  const Tasks* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Tasks>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fs.proto.Tasks)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fs.proto.Tasks)
    MergeFrom(*source);
  }
}

void Tasks::MergeFrom(const Tasks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fs.proto.Tasks)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  task_.MergeFrom(from.task_);
}

void Tasks::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fs.proto.Tasks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tasks::CopyFrom(const Tasks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.proto.Tasks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tasks::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->task())) return false;
  return true;
}

void Tasks::Swap(Tasks* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tasks::InternalSwap(Tasks* other) {
  using std::swap;
  CastToBase(&task_)->InternalSwap(CastToBase(&other->task_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Tasks::GetMetadata() const {
  protobuf_fs_5ftask_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fs_5ftask_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace fs
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::fs::proto::Task* Arena::CreateMaybeMessage< ::fs::proto::Task >(Arena* arena) {
  return Arena::CreateInternal< ::fs::proto::Task >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::fs::proto::Tasks* Arena::CreateMaybeMessage< ::fs::proto::Tasks >(Arena* arena) {
  return Arena::CreateInternal< ::fs::proto::Tasks >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
