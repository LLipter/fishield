syntax = "proto2";

package fs.proto;

message File
{
	enum FileType
	{
		REGULAR				= 0;
		DIRECTORY			= 1;
		SYMLINK				= 2;
		OTHER				= 3;
	}
	required string filename	= 1;
	required uint64 mtime		= 2;	// time of last data modification
	required FileType file_type	= 3;
	optional uint64 size		= 4;	// only valid for REGULAR file
	optional FileList filelist	= 5;	// only valid for DIRECTORY file
}

message FileList
{
	required string path		= 1;
    	repeated File file		= 2;
}

message Packet
{
	required uint64 packet_id 	= 1;
	required bytes data 		= 2;
}

message Request
{
	enum RequestType
	{
		LOGIN				= 0;	// try to login
		FILELIST			= 1;	// request for a filelist
                MKDIR				= 2;	// create a new directory
		UPLOAD				= 3;	// initiate a new UPLOAD task
		DOWNLOAD			= 4;	// initiate a new DOWNLOAD task
		SEND_PACKET			= 5;	// send a packet
		RECEIVE_PACKET			= 6;
		DOWNLOAD_CONFIRM		= 7;	// confirm that a download task completes
		REMOVE				= 8;	// delete a file		
		RENAME				= 9;	// rename or move a existing file
		CANCEL				= 10;	// cancel a task
		DISKSPACE			= 11;	// get disk space information
		USERLIST			= 12;	// get all user information
		ADDUSER				= 13;	// add a new user
		REMOVEUSER			= 14;	// remove a user
		IPLIST				= 15;	// get ip list
		ADDIP				= 16;	// add a new ip address
		REMOVEIP			= 17;
	}
	required RequestType req_type	= 1;
	optional string username	= 2;
	optional string password	= 3;
	optional string token		= 4;
	optional string remote_path	= 5;
	optional string filename	= 6;
	optional uint64 packet_no	= 7;	// number of packets that a UPLOAD task will send
	optional Packet packet		= 8;
	optional uint64 task_id		= 9;	// task_id of which CANCEL/PAUSE/RESUME/PACKET
	optional uint64	packet_id	= 10;
	optional string new_path	= 11;	// new path of a RENAMEd file
	optional User user		= 12;
	optional string ipaddress	= 13;
	
}


message Response
{
	enum ResponseType
	{
		SUCCESS				= 0;
		NOSUCHUSER			= 1;	// no such user
		ILLEGALPASSWD			= 2;	// pasword is not correct
		UNKNOWN				= 3;	// unkown error
		NORESPONSE			= 4;	// cannot get response from server
		ILLEGALTOKEN			= 5;	// token is illegal relogin is needed
		ILLEGALPATH			= 6;	// filepath is illegal
		ILLEGALREQUEST			= 7;	// received request contains unknown req_type
		ILLEGALTASKSTATUS		= 8;	// illegal task status
		ILLEGALTASKID			= 9;	// illegal task id
		ILLEGALPACKETID			= 10;	// illegal packet id
		ILLEGALCLIENTID			= 11;	// illegal client id
		NOPRIVILEGE			= 12;	// has no corresponding privilege
		DUPLICATEUSER			= 13;	// Username has already exist
		DUPLICATEIPADDR			= 14;	// duplicate ip address
	
	}
	required ResponseType resp_type	= 1;
	optional string	token		= 2;	// token generate by server when login successfully
	optional FileList file_list   	= 3;
	optional uint64 task_id		= 4;	// task_id of a UPLOAD task
	optional uint64	packet_id	= 5;	// packet id of packet that client should send
	optional uint64 packet_no	= 6;	// number of packets that a DOWNLOAD task will receive
	optional Packet	packet		= 7;
	optional uint64 avai_space	= 8;	// available disk space in server
	optional uint64 total_space	= 9;	// total disk space in server
	optional uint64	privilege	= 10;	// user's privilege
	optional UserList userlist	= 11;
	optional IPList	iplist		= 12;
}


message User
{
	required string username		= 1;
	required string password		= 2;
	required uint64	privilege		= 3;
	optional uint64	last_packet_time	= 4;
}

message UserList
{
	repeated User user		= 1;
}

message IPList
{
	repeated IP ip	= 1;
}

message IP
{
	required string address	= 1;	
}

